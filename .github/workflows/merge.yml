name: Merge and Retest VPN Subscriptions

on:
  schedule:
    # Single hourly trigger - job type determined by script
    - cron: '0 * * * *'
  workflow_dispatch:
  push:
    paths:
      - 'sources.txt'
      - '.github/workflows/merge.yml'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: merge-pipeline
  cancel-in-progress: false

jobs:
  # ========================================================================
  # STEP 1: Determine Job Type & Check for Concurrent Runs
  # ========================================================================
  prepare:
    name: Prepare - Determine Job Type & Check Lock
    runs-on: ubuntu-latest
    outputs:
      job-type: ${{ steps.determine.outputs.job_type }}
      should-run: ${{ steps.lock.outputs.should_run }}
      lock-acquired: ${{ steps.lock.outputs.lock_acquired }}
    steps:
      - name: Determine which job should run
        id: determine
        run: |
          hour=$(date -u +%H)

          # Merge at 0, 3, 6, 9, 12, 15, 18, 21 UTC
          if [ $((hour % 3)) -eq 0 ]; then
            job_type="merge"
          else
            job_type="retest"
          fi

          echo "job_type=${job_type}" >> $GITHUB_OUTPUT
          echo "üîç Determined job type: ${job_type}"

      - name: Check for concurrent runs and acquire lock
        id: lock
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get all workflow runs in progress
            const allRuns = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'merge.yml',
              status: 'in_progress'
            });

            // Current run is always in the list
            const inProgressCount = allRuns.data.workflow_runs.length;

            if (inProgressCount > 1) {
              // Another instance is already running
              core.setOutput('should_run', 'false');
              core.setOutput('lock_acquired', 'false');
              console.log(`‚ö†Ô∏è Lock unavailable: ${inProgressCount - 1} other workflow(s) in progress`);
            } else {
              // We have the lock
              core.setOutput('should_run', 'true');
              core.setOutput('lock_acquired', 'true');
              console.log('‚úÖ Lock acquired - proceeding with workflow');
            }

  # ========================================================================
  # STEP 2: Merge Job (Every 3 Hours)
  # ========================================================================
  merge-configs:
    name: Merge Proxy Configurations
    needs: prepare
    if: needs.prepare.outputs.job-type == 'merge' && needs.prepare.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 50

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y geoip-bin geoipupdate

      - name: Install Python dependencies
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            python -m pip install --upgrade pip
            pip install -e .

      - name: Create output directory
        run: mkdir -p output && chmod 755 output

      - name: Download GeoIP databases
        env:
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
        run: |
          if [ -z "$MAXMIND_LICENSE_KEY" ]; then
            echo "‚ö†Ô∏è  MAXMIND_LICENSE_KEY not set"
            echo "   GeoIP features will be disabled"
            echo "   To enable, add secret to GitHub repository settings"
          else
            echo "üì• Downloading GeoIP databases..."
            configstream update-databases
            echo "‚úÖ GeoIP databases ready"
          fi

      - name: Run merge pipeline with retry
        id: merge
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 40
          max_attempts: 3
          retry_wait_seconds: 30
          retry_on: error
          command: |
            configstream merge \
              --sources sources.txt \
              --output output/ \
              --max-workers 20 \
              --timeout 10

      - name: Validate output files
        run: |
          set -e
          echo "üìã Validating output files..."

          # Check files exist
          for file in output/proxies.json output/statistics.json; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing: $file"
              exit 1
            fi
            echo "‚úÖ Found: $file"
          done

          # Validate JSON
          for file in output/*.json; do
            if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
              echo "‚ùå Invalid JSON: $file"
              exit 1
            fi
            echo "‚úÖ Valid JSON: $file"
          done

          # Check proxy count
          proxy_count=$(python3 -c "import json; print(len(json.load(open('output/proxies.json'))))")
          if [ "$proxy_count" -lt 1 ]; then
            echo "‚ö†Ô∏è Warning: No proxies found (${proxy_count})"
          else
            echo "‚úÖ Proxy count: ${proxy_count}"
          fi

      - name: Generate metadata with cache-busting
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          CACHE_BUST=$(date +%s)

          python3 << 'EOF'
          import json
          from datetime import datetime, timezone

          metadata = {
              "generated_at": "$TIMESTAMP",
              "cache_bust": "$CACHE_BUST",
              "version": "1.0.0",
              "job_type": "merge",
              "status": "success",
              "workflow_run": "${{ github.run_id }}",
              "commit": "${{ github.sha }}"
          }

          with open('output/metadata.json', 'w') as f:
              json.dump(metadata, f, indent=2)

          print(f"‚úÖ Metadata generated at {metadata['generated_at']}")
          EOF

      - name: Commit and push changes
        id: commit
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          git add output/

          if git diff --staged --quiet; then
            echo "status=no-changes" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes to commit"
          else
            TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
            PROXY_COUNT=$(python3 -c "import json; print(len(json.load(open('output/proxies.json'))))")

            git commit -m "ü§ñ Merge configs - $TIMESTAMP

            - Processed proxies: ${PROXY_COUNT}
            - Generated at: $TIMESTAMP
            - Workflow: ${{ github.run_id }}

            [skip ci]"

            echo "status=committed" >> $GITHUB_OUTPUT
            echo "üìù Changes committed"
          fi

      - name: Push changes with retry
        if: steps.commit.outputs.status == 'committed'
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            git push origin main

      - name: Trigger GitHub Pages deployment
        if: steps.commit.outputs.status == 'committed'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üì± Triggering GitHub Pages deployment...');
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deploy-pages.yml',
                ref: 'main'
              });
              console.log('‚úÖ Deployment workflow triggered');
            } catch (error) {
              console.warn('‚ö†Ô∏è Failed to trigger deployment:', error.message);
              // Don't fail the entire workflow for this
            }

      - name: Report status
        if: always()
        run: |
          echo "## ü§ñ Merge Job Status"
          echo "- Merge Status: ${{ job.status }}"
          echo "- Changes: ${{ steps.commit.outputs.status }}"
          echo "- Proxies: $(python3 -c 'import json; print(len(json.load(open(\"output/proxies.json\"))))' 2>/dev/null || echo 'Error')"
          echo "- Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # ========================================================================
  # STEP 3: Retest Job (Every Hour When Not Merging)
  # ========================================================================
  retest-configs:
    name: Retest Proxy Configurations
    needs: prepare
    if: needs.prepare.outputs.job-type == 'retest' && needs.prepare.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 35

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            python -m pip install --upgrade pip
            pip install -e .

      - name: Check if proxies file exists
        id: check
        run: |
          if [ -f "output/proxies.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            proxy_count=$(python3 -c "import json; print(len(json.load(open('output/proxies.json'))))")
            echo "count=${proxy_count}" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
          fi

      - name: Run retest with retry
        if: steps.check.outputs.exists == 'true'
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 2
          retry_wait_seconds: 30
          command: |
            configstream retest \
              --input output/proxies.json \
              --output output/ \
              --timeout 8 \
              --max-workers 15

      - name: Update metadata
        if: steps.check.outputs.exists == 'true'
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          python3 << 'EOF'
          import json

          metadata_file = 'output/metadata.json'

          try:
              with open(metadata_file, 'r') as f:
                  metadata = json.load(f)
          except:
              metadata = {}

          metadata['last_retest_at'] = "$TIMESTAMP"
          metadata['last_retest_status'] = 'success'

          with open(metadata_file, 'w') as f:
              json.dump(metadata, f, indent=2)

          print(f"‚úÖ Retest metadata updated at {metadata['last_retest_at']}")
          EOF

      - name: Commit changes if needed
        id: commit
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          git add output/

          if git diff --staged --quiet; then
            echo "status=no-changes" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes to commit"
          else
            TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')

            git commit -m "üîÑ Retest configs - $TIMESTAMP

            - Retest complete: $TIMESTAMP
            - Workflow: ${{ github.run_id }}

            [skip ci]"

            echo "status=committed" >> $GITHUB_OUTPUT
            echo "üìù Changes committed"
          fi

      - name: Push changes with retry
        if: steps.commit.outputs.status == 'committed'
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            git push origin main

      - name: Report status
        if: always()
        run: |
          echo "## üîÑ Retest Job Status"
          echo "- Retest Status: ${{ job.status }}"
          echo "- Proxies Found: ${{ steps.check.outputs.count }}"
          echo "- Changes: ${{ steps.commit.outputs.status }}"
          echo "- Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # ========================================================================
  # STEP 4: Unlock (Always runs to prevent deadlock)
  # ========================================================================
  unlock:
    name: Release Lock
    needs: [prepare, merge-configs, retest-configs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Release workflow lock
        run: |
          echo "‚úÖ Workflow completed, lock released"