/*! Minimal date adapter compatible with the SimpleChart fallback. */
(function (global) {
  'use strict';
  if (!global.Chart) {
    return;
  }

  const MS_PER = {
    millisecond: 1,
    second: 1000,
    minute: 60 * 1000,
    hour: 60 * 60 * 1000,
    day: 24 * 60 * 60 * 1000,
    week: 7 * 24 * 60 * 60 * 1000
  };

  function toDate(value) {
    if (value instanceof Date) {
      return value;
    }
    if (typeof value === 'number') {
      return new Date(value);
    }
    const parsed = Date.parse(value);
    if (Number.isNaN(parsed)) {
      return new Date(NaN);
    }
    return new Date(parsed);
  }

  const adapter = {
    formats() {
      return {
        datetime: 'yyyy-MM-dd HH:mm:ss',
        millisecond: 'HH:mm:ss.SSS',
        second: 'HH:mm:ss',
        minute: 'HH:mm',
        hour: 'HH:mm',
        day: 'MMM d',
        week: 'wo [week] yyyy',
        month: 'MMM yyyy',
        quarter: 'QQQ yyyy',
        year: 'yyyy'
      };
    },
    parse(value) {
      const date = toDate(value);
      return Number.isNaN(date.getTime()) ? null : date.getTime();
    },
    format(value) {
      const date = toDate(value);
      if (Number.isNaN(date.getTime())) {
        return '';
      }
      return date.toISOString();
    },
    add(value, amount, unit) {
      const date = toDate(value);
      if (Number.isNaN(date.getTime()) || !MS_PER[unit]) {
        return date;
      }
      return new Date(date.getTime() + amount * MS_PER[unit]);
    },
    diff(max, min, unit) {
      const maxDate = toDate(max);
      const minDate = toDate(min);
      if (Number.isNaN(maxDate.getTime()) || Number.isNaN(minDate.getTime()) || !MS_PER[unit]) {
        return NaN;
      }
      return (maxDate.getTime() - minDate.getTime()) / MS_PER[unit];
    },
    startOf(value, unit) {
      const date = toDate(value);
      if (Number.isNaN(date.getTime())) {
        return date;
      }
      if (unit === 'day') {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
      }
      if (unit === 'week') {
        const day = date.getDay();
        const diff = date.getDate() - day;
        return new Date(date.getFullYear(), date.getMonth(), diff);
      }
      if (unit === 'month') {
        return new Date(date.getFullYear(), date.getMonth(), 1);
      }
      if (unit === 'year') {
        return new Date(date.getFullYear(), 0, 1);
      }
      return date;
    }
  };

  global.Chart._adapters = global.Chart._adapters || {};
  global.Chart._adapters._date = adapter;
})(typeof window !== 'undefined' ? window : this);
