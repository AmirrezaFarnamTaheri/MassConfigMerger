Metadata-Version: 2.4
Name: configstream
Version: 0.4.0
Summary: VPN subscription aggregator and merger
Author-email: Amirreza 'Farnam' Taheri <taherifarnam@gmail.com>
Project-URL: Homepage, https://amirrezafarnamtaheri.github.io/configStream/
Project-URL: Source, https://github.com/amirrezafarnamtaheri/configStream/
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp
Requires-Dist: aiodns
Requires-Dist: nest-asyncio
Requires-Dist: telethon
Requires-Dist: PyYAML
Requires-Dist: geoip2
Requires-Dist: pydantic>=2
Requires-Dist: pydantic-settings
Requires-Dist: tqdm
Requires-Dist: flask
Requires-Dist: aiosqlite
Requires-Dist: prometheus_client
Requires-Dist: psutil
Requires-Dist: apscheduler
Requires-Dist: rich
Requires-Dist: flask-wtf
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pyfakefs; extra == "dev"
Requires-Dist: types-PyYAML; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: pip-audit; extra == "dev"
Requires-Dist: hypercorn; extra == "dev"
Provides-Extra: web
Requires-Dist: Flask; extra == "web"
Requires-Dist: prometheus_client; extra == "web"
Requires-Dist: asgiref; extra == "web"
Requires-Dist: hypercorn; extra == "web"
Dynamic: license-file

# ConfigStream

A toolchain for collecting, testing, and merging free VPN configuration links from public sources.

[![CI](https://github.com/AmirrezaFarnamTaheri/ConfigStream/actions/workflows/ci.yml/badge.svg)](https://github.com/AmirrezaFarnamTaheri/ConfigStream/actions/workflows/ci.yml)
[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)

This project provides a command-line tool to automatically fetch VPN configurations from public sources, test their connectivity, and merge them into a single, performance-sorted subscription link.

The `configstream` command provides several subcommands:
```mermaid
graph TD
    A[configstream] --> B[fetch]
    A --> C[merge]
    A --> D[retest]
    A --> E[full]
    A --> F[sources]
```

This guide provides instructions for both basic usage and automation.

**Security Note**: All VPN servers collected by this tool come from public lists. Operators are unknown and may log or even alter your traffic. Avoid using them for banking or other sensitive tasks. See the [Important Security & Privacy Disclaimer](docs/tutorial.md#-important-security--privacy-disclaimer) for best practices.

- These nodes come from public sources with unknown operators.
- Avoid using them for banking or sensitive work.
- Traffic may be logged or modified.
- Best for casual browsing or bypassing blocks, not as a secure VPN.
- Use at your own risk.

**Best practice reminders:**
- Don't sign into critical accounts.
- Prefer HTTPS connections.
- Use temporary or secondary credentials when possible.

> **Note**: The default protocol list is optimised for the Hiddify client. Other VPN apps may require adjusting `--include-protocols`.

> **How protocols are filtered**
>
> The `fetch_protocols` list in `config.yaml` controls which types of links are
> collected by the `fetch` command. You can override this with the `--fetch-protocols` argument.
>
> The `merge` command uses `merge_include_protocols` and `merge_exclude_protocols` from `config.yaml` to filter the final list. Adjust this list to match what your VPN client supports.
>
> To keep only a subset during a merge, you can run:
>
> ```bash
> configstream merge --include-protocols VLESS,VMESS
> ```

### âš¡ Quick Start

**Legal Notice**: This software is provided for educational purposes only. You are responsible for complying with all local regulations when using any collected VPN nodes.

1.  **Install Python 3.8 or newer**
    -   On **Windows** download it from [python.org](https://www.python.org/downloads/) and tick *Add Python to PATH* during setup.
    -   On **macOS/Linux** use your package manager, e.g. `sudo apt install python3`.

2.  **Clone the repository**
    ```bash
    git clone https://github.com/AmirrezaFarnamTaheri/ConfigStream.git
    cd ConfigStream
    ```

3.  **Install the package and its dependencies**
    ```bash
    # Install the package and its dependencies
    pip install .
    # For development (tests, linters), install the [dev] extras
    pip install -e .[dev]
    ```
    *To filter by country, install `geoip2` and download the free GeoLite2 database from MaxMind.*

4.  **Copy and customize `config.yaml`**
    After installing the requirements, copy [`config.yaml.example`](config.yaml.example) to `config.yaml`. Edit this file to set proxy settings or tweak other options as needed.

5.  **Gather configuration links**
    ```bash
    configstream fetch --hours 12
    ```
    This creates `output/vpn_subscription_raw.txt` and other files based on your configuration.

6.  **Merge and sort the results**
    You can merge configurations from the `sources.txt` file or from a file you've already generated.
    ```bash
    # Merge from sources.txt
    configstream merge

    # Merge from a previously fetched file
    configstream merge --resume output/vpn_subscription_raw.txt
    ```

7.  **All in one step**
    ```bash
    configstream full --hours 12
    ```
    This runs the fetch and merge commands sequentially.

8.  **Country filters**
    ```bash
    configstream merge --geoip-db GeoLite2-Country.mmdb --include-country US,CA
    ```
    Combine `--include-country` or `--exclude-country` with `--geoip-db` to select preferred regions.

9.  **Check the logs**
    Every run writes output to `logs/YYYY-MM-DD.log`. Review these files to monitor progress and diagnose issues.

10. **Import your subscription**
    -   Use the link in `output/vpn_subscription_base64.txt` (unless `--no-base64` was used) or load `vpn_singbox.json` in clients like sing-box.

> **Need more options?** Run `configstream --help` or `configstream <command> --help` for the full list of options.

### Managing Sources

The `sources` command provides a simple way to manage the `sources.txt` file from the command line.

- **List all sources**:
  ```bash
  configstream sources list
  ```

- **Add a new source**:
  ```bash
  configstream sources add "http://example.com/new-source"
  ```
  The command will validate the URL format and check for duplicates before adding it.

- **Remove a source**:
  ```bash
  configstream sources remove "http://example.com/new-source"
  ```

## Features

- Fetches VPN configurations from web sources and Telegram channels.
- Parses a wide variety of protocols, including VMess, VLESS, Trojan, and Shadowsocks.
- Tests the connectivity and latency of each server.
- Filters configurations by protocol, country, or regex patterns.
- Ranks the merged configurations by latency.
- Generates subscription files for various clients, including raw text, base64, Clash, and Sing-Box.
- Creates CSV and JSON reports for analysis.
- Provides a command-line interface for all fetching, merging, and testing operations.
- Includes a secured Flask control panel with JSON APIs for history and automation.
- Can be automated for periodic runs using the included Docker Compose setup.

## Table of Contents

- [Quick Start](#-quick-start)
- [Full Tutorial](docs/tutorial.md)
- [Protocol Details](docs/protocol-deep-dive.md)
- [Troubleshooting](docs/advanced-troubleshooting.md)
- [Source List](#source-list)
- [Output Files](#output-files)
- [Additional Features](#additional-features)
- [FAQ](#faq)

## Output Files

| File Name                              | Purpose                                                                                                  |
| -------------------------------------- | -------------------------------------------------------------------------------------------------------- |
| `vpn_subscription_base64.txt` | *(optional)* A base64-encoded file for direct import from a URL.                  |
| `vpn_subscription_raw.txt`    | A plain text list of all the VPN configuration links.                                                    |
| `vpn_detailed.csv`            | *(optional)* A spreadsheet with detailed info about each server. |
| `vpn_report.json`             | A report with all stats and configurations in JSON format.                      |
| `vpn_report.html`             | *(optional)* An HTML table summarizing the results.                           |
| `vpn_singbox.json`            | Outbound objects ready for import into sing-box/Stash.                                                   |
| `clash.yaml`                  | A Clash configuration with all proxies and a basic group.                  |
| `vpn_clash_proxies.yaml`      | A minimal Clash YAML listing only the proxies, suitable as a provider.                                      |
| `surge.conf` *(via `--output-surge`)* | A Surge format configuration.                                    |
| `quantumultx.conf` *(via `--output-qx`)* | A Quantumult X server list.                                      |
| `xyz.conf` *(via `--output-xyz`)* | A demonstration XYZ format listing basic proxy info. |

Enable the HTML summary by running the `merge` command with `--write-html` or by setting `write_html: true` in `config.yaml`.

All of these files are written to the directory specified by `--output-dir` (defaults to `output/`) unless an absolute path is given.

### Surge & Quantumult X Usage

Enable these formats by passing `--output-surge` and `--output-qx` to the `merge` command.
```bash
configstream merge --output-surge surge.conf --output-qx quantumultx.conf
```

Once the files are generated, host them somewhere your phone can reach or copy them directly to the device.

Example of generating and serving the files locally:
```bash
configstream merge --output-surge surge.conf --output-qx quantumultx.conf
python3 -m http.server -d output 8000
```
Then import `http://<your-ip>:8000/surge.conf` or `http://<your-ip>:8000/quantumultx.conf` in the respective app.

You can also call the converters directly from `src/configstream/format_converters_extra.py`:

```python
from configstream.format_converters_extra import (
    generate_surge_conf,
    generate_qx_conf,
)

surge_data = generate_surge_conf(proxies)
qx_data = generate_qx_conf(proxies)
```

### Important Notes

- The script only runs when executed and does **not** stay running in the background. Use your operating system's scheduler if you need periodic updates.
- When scraping Telegram, make sure you only access **public** channels and respect Telegram's Terms of Service along with your local laws.
- `allowed_user_ids` lists the Telegram user IDs that are permitted to issue commands when the bot is running.
- All events are logged to the directory specified in `log_dir` (defaults to `logs/`).
- On Windows consoles, colored output (like progress bars) requires the optional `colorama` library. Install it with `pip install colorama`.

### Telegram Bot Mode

Set `telegram_api_id`, `telegram_api_hash` and `telegram_bot_token` in `config.yaml` to enable the bot interface. Only Telegram accounts listed in `allowed_user_ids` may issue commands. Obtain your numeric ID by messaging [@userinfobot](https://t.me/userinfobot).

Acquire the `telegram_api_id` and `telegram_api_hash` by signing in at [my.telegram.org](https://my.telegram.org) and creating a new application.

Run the tool in bot mode:
```bash
configstream fetch --bot --config config.yaml
```

The tool must be running for the `/update` and `/status` commands to work.

### Docker Compose Automation

The included `docker-compose.yml` automates running the scripts. The `merger` service loops every `MERGE_INTERVAL` seconds (default `86400`). Enable the optional `aggregator` profile to fetch new links on a schedule.

Start all services with:
```bash
docker compose up -d
```

Add profiles as needed:
```bash
docker compose --profile aggregator --profile retester up -d
```

### Optional Extras

The project defines a couple of [extras](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-extras) for optional features:

- `dev` â€“ installs the testing tools and linters needed for development.
- `web` â€“ installs the minimal Flask-based web interface.

Install them with `pip install -e .[dev]` or `pip install -e .[web]` as needed.

### Flask Web Interface

Install the `web` extras from PyPI:
```bash
pip install configstream[web]
```

Run the server with:
```bash
python -m configstream.web
```

Navigate to `http://localhost:8080` to use the refreshed control panel. The dashboard exposes the
latest proxy health metrics, provides quick links to reports and Prometheus metrics, and drives the
`POST /api/aggregate` and `POST /api/merge` endpoints for background processing. If you set
`security.web_api_token` in `config.yaml` the token must be supplied via the dashboard input field
or an `X-API-Key` header when calling the endpoints directly. Historical proxy results are also
available as JSON from `GET /api/history` for programmatic integrations.

### Proxy Configuration

If your network requires using an HTTP or SOCKS proxy, you can provide the settings in two ways:

1. **Environment variables** â€“ export `HTTP_PROXY` or `SOCKS_PROXY`.
2. **Configuration file** â€“ set the `http_proxy` or `socks_proxy` fields in `config.yaml`.

## Additional Features

### Sorting by Reliability

Use `configstream merge --sort-by reliability` to rank servers by past success rates recorded in `proxy_history.db`. This provides a way to prioritize servers that have been historically more reliable.

### Regex Filtering

Use `--include-pattern` and `--exclude-pattern` to filter configs that match a regular expression. This is useful for selecting or excluding servers based on their names or other attributes.

### GitHub Gist Upload

Use `--upload-gist` to automatically upload the generated files to a private GitHub Gist. This is a convenient way to share your subscription files across devices.

### Included Source List

The `sources.txt` file collects links from hundreds of projects across GitHub and Telegram. You can add your own sources to this file or use the `sources` command to manage them.

### Handling Failing Sources

Each time a URL in `sources.txt` cannot be fetched, its failure count is stored in `sources.failures.json`. When a source reaches a configurable failure threshold, it is removed from `sources.txt`. This helps to keep the source list clean and efficient.

## FAQ

### Why does the script take so long?
The merger checks hundreds of servers. Reduce the number of sources or use a smaller `--concurrent-limit`. Skipping tests with `--no-url-test` on the `merge` command can also speed up runs.

### There is no output directory
Ensure you ran the script in this repository and watch for errors. Results are saved in the `output/` folder or the location given by `--output-dir`.

### Telegram authentication errors
Verify your `telegram_api_id`, `telegram_api_hash` and bot token.

### GeoIP lookup errors
Install the `geoip2` package and download the free GeoLite2 database from MaxMind. Pass `--geoip-db /path/to/GeoLite2-Country.mmdb` to enable country filtering.

## Testing

Run the tests with `pytest`.

> **Important**: install the development extras with `pip install -e .[dev]` **before** running the tests.

Then execute:
```bash
python -m pytest
```

## Changelog & Contributing

See [CHANGELOG.md](CHANGELOG.md) for a summary of new features and updates.
If you encounter problems or have improvements, please open an issue or submit a pull request. For detailed contribution guidelines see [CONTRIBUTING.md](CONTRIBUTING.md).

## Releasing a new version

1. Update the `version` field in `pyproject.toml`.
2. Add a corresponding entry at the top of `CHANGELOG.md`.
3. Commit your changes and create a git tag that matches the version.
```bash
git commit -am "Release vX.Y.Z"
git tag -a vX.Y.Z -m "vX.Y.Z"
git push && git push --tags
```
Pushing the tag triggers the `release` workflow.

## License

ConfigStream is licensed under the GNU General Public License v3.0. See the [LICENSE](LICENSE) file for details.
