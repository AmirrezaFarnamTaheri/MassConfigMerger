Metadata-Version: 2.4
Name: massconfigmerger
Version: 0.4.0
Summary: VPN subscription aggregator and merger
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp
Requires-Dist: aiodns
Requires-Dist: nest-asyncio
Requires-Dist: telethon
Requires-Dist: PyYAML
Requires-Dist: geoip2
Requires-Dist: pydantic>=2
Requires-Dist: pydantic-settings
Requires-Dist: tqdm
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: types-PyYAML; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Provides-Extra: web
Requires-Dist: Flask; extra == "web"
Dynamic: license-file

# Mass Config Merger ðŸš€

Automated toolchain for collecting, testing and merging free VPN configuration
links from hundreds of public sources.

[![CI](https://github.com/AmirrezaFarnamTaheri/MassConfigMerger/actions/workflows/ci.yml/badge.svg)](https://github.com/AmirrezaFarnamTaheri/MassConfigMerger/actions/workflows/ci.yml)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Welcome to **Mass Config Merger**! This project provides a powerful, unified command-line tool that automatically fetches VPN configurations from hundreds of public sources, tests their connectivity, and merges them into a single, performance-sorted subscription link for use in your favorite VPN client.

The `massconfigmerger` command provides a unified interface with several subcommands:
```mermaid
graph TD
    A[massconfigmerger] --> B[fetch]
    A --> C[merge]
    A --> D[retest]
    A --> E[full]
```

This guide is designed for **everyone**, from absolute beginners with no coding experience to advanced users who want full automation.

**Security Note**: All VPN servers collected by this tool come from public lists. Operators are unknown and may log or even alter your traffic. Avoid using them for banking or other sensitive tasks. See the [Important Security & Privacy Disclaimer](docs/tutorial.md#-important-security--privacy-disclaimer) for best practices.

- These nodes come from public sources with unknown operators.
- Avoid using them for banking or sensitive work.
- Traffic may be logged or modified.
- Best for casual browsing or bypassing blocks, not as a secure VPN.
- Use at your own risk.

**Best practice reminders:**
- Don't sign into critical accounts.
- Prefer HTTPS connections.
- Use temporary or secondary credentials when possible.

> **Note**: The default protocol list is optimised for the Hiddify client. Other VPN apps may require adjusting `--include-protocols`.

> **How protocols are filtered**
>
> The `protocols` list in `config.yaml` controls which types of links are
> collected by the `fetch` command.
>
> The `merge` command applies its own `include_protocols` list from `config.yaml` to drop any unwanted protocols before writing the final files. Adjust this list to match what your VPN client supports or to exclude protocols you don't trust.
>
> To keep only a subset you can run:
>
> ```bash
> massconfigmerger merge --include-protocols VLESS,VMESS
> ```

**Important**: Install the dependencies with `pip install -r requirements.txt` and then install the package with `pip install -e .` to make the `massconfigmerger` command available.

### âš¡ Quick Start

**Legal Notice**: This software is provided for educational purposes only. You are responsible for complying with all local regulations when using any collected VPN nodes.

1.  **Install Python 3.8 or newer**
    -   On **Windows** download it from [python.org](https://www.python.org/downloads/) and tick *Add Python to PATH* during setup.
    -   On **macOS/Linux** use your package manager, e.g. `sudo apt install python3`.

2.  **Clone the repository**
    ```bash
    git clone https://github.com/AmirrezaFarnamTaheri/MassConfigMerger.git
    cd MassConfigMerger
    ```

3.  **Install the requirements**
    ```bash
    pip install -r requirements.txt
    # Install the package so the CLI tool is on your PATH
    pip install -e .
    # For development (tests, linters)
    pip install -e .[dev]
    ```
    *Install `geoip2` as well if you plan to filter by country and download the free GeoLite2 database from MaxMind.*

4.  **Copy and customize `config.yaml`**
    After installing the requirements, copy [`config.yaml.example`](config.yaml.example) to `config.yaml`. Edit this file to set proxy settings or tweak other options as needed.

5.  **Gather configuration links**
    ```bash
    massconfigmerger fetch --hours 12
    ```
    This creates `output/vpn_subscription_raw.txt` and other files based on your configuration.

6.  **Merge and sort the results**
    You can merge configurations from the `sources.txt` file or from a file you've already generated.
    ```bash
    # Merge from sources.txt
    massconfigmerger merge

    # Merge from a previously fetched file
    massconfigmerger merge --resume output/vpn_subscription_raw.txt
    ```

7.  **All in one step**
    ```bash
    massconfigmerger full --hours 12
    ```
    This runs the fetch and merge commands sequentially, which is the quickest way to get fresh, tested links.

8.  **Country filters**
    ```bash
    massconfigmerger merge --geoip-db GeoLite2-Country.mmdb --include-country US,CA
    ```
    Combine `--include-country` or `--exclude-country` with `--geoip-db` to select preferred regions.

9.  **Check the logs**
    Every run writes detailed output to `logs/YYYY-MM-DD.log`. Review these files with `less` or `tail -f` to monitor progress and diagnose issues.

10. **Import your subscription**
    -   Use the link in `output/vpn_subscription_base64.txt` (unless `--no-base64` was used) or load `vpn_singbox.json` in clients like sing-box.

> **Need more options?** Run `massconfigmerger --help` or `massconfigmerger <command> --help` for the full list of options.

## ðŸ“– Table of Contents

- [Quick Start](#-quick-start)
- [Full Tutorial](docs/tutorial.md)
- [Protocol Deep Dive](docs/protocol-deep-dive.md)
- [Advanced Troubleshooting](docs/advanced-troubleshooting.md)
- [Huge Source List](#huge-source-list)
- [ðŸ“‚ Understanding the Output Files](#-understanding-the-output-files)
- [Advanced Features](#advanced-features)
- [FAQ](#faq)

## ðŸ“‚ Understanding the Output Files

| File Name                              | Purpose                                                                                                  |
| -------------------------------------- | -------------------------------------------------------------------------------------------------------- |
| `vpn_subscription_base64.txt` | *(optional)* A base64-encoded file. Most apps import directly from this file's raw URL.                  |
| `vpn_subscription_raw.txt`    | A plain text list of all the VPN configuration links.                                                    |
| `vpn_detailed.csv`            | *(optional)* A spreadsheet with detailed info about each server, including protocol, host, and ping time. |
| `vpn_report.json`             | A detailed report with all stats and configurations in a developer-friendly format.                      |
| `vpn_report.html`             | *(optional)* Simple HTML table summarizing protocol, host, latency and country.                           |
| `vpn_singbox.json`            | Outbound objects ready for import into sing-box/Stash.                                                   |
| `clash.yaml`                  | Clash configuration with all proxies and a basic group. Compatible with Clash/Clash Meta.                  |
| `vpn_clash_proxies.yaml`      | Minimal Clash YAML listing only the proxies, suitable as a provider.                                      |
| `surge.conf` *(via `--output-surge`)* | Surge format configuration. Works with Surge iOS/macOS 5 or later.                                    |
| `quantumultx.conf` *(via `--output-qx`)* | Quantumult X server list compatible with version 1.1.9+ on iOS.                                      |
| `xyz.conf` *(via `--output-xyz`)* | Demonstration XYZ format listing basic proxy info. |

Enable the HTML summary by running the `merge` command with `--write-html` or by setting `write_html: true` in `config.yaml`.

All of these files are written to the directory specified by `--output-dir` (defaults to `output/`) unless an absolute path is given.

### Surge & Quantumult X Usage

Enable these formats by passing `--output-surge` and `--output-qx` to the `merge` command.
```bash
massconfigmerger merge --output-surge surge.conf --output-qx quantumultx.conf
```

Once the files are generated, host them somewhere your phone can reach or copy
them directly to the device. In Surge, open **Settings â†’ Configuration â†’
Download** and provide the URL to `surge.conf`. For Quantumult X, go to
**Settings â†’ Server List â†’ Import** and select the `quantumultx.conf` file or a
remote URL. Refer to the [Surge manual](https://manual.nssurge.com/) and the
[Quantumult X examples](https://github.com/KOP-XIAO/QuantumultX) for details.

Example of generating and serving the files locally:
```bash
massconfigmerger merge --output-surge surge.conf --output-qx quantumultx.conf
python3 -m http.server -d output 8000
```
Then import `http://<your-ip>:8000/surge.conf` or
`http://<your-ip>:8000/quantumultx.conf` in the respective app.

You can also call the converters directly from
[`src/massconfigmerger/advanced_converters.py`](src/massconfigmerger/advanced_converters.py):

```python
from massconfigmerger.advanced_converters import (
    generate_surge_conf,
    generate_qx_conf,
)

surge_data = generate_surge_conf(proxies)
qx_data = generate_qx_conf(proxies)
```

### Important Notes

- The script only runs when executed and does **not** stay running in the
  background.  Use your operating system's scheduler if you need periodic
  updates.
- When scraping Telegram make sure you only access **public** channels and
  respect Telegram's Terms of Service along with your local laws.
- `allowed_user_ids` lists the Telegram user IDs that are permitted to issue
  commands when the bot is running. Retrieve your own ID by messaging
  [@userinfobot](https://t.me/userinfobot) and add the number to this list.
- All events are logged to the directory specified in `log_dir` (defaults to
  `logs/` here) so you can audit what was fetched and from where.
- The `channels.txt` file now lists several active Telegram channels discovered
  during research, giving you more frequent updates.
- On Windows consoles, colored output (like progress bars) requires the
  optional `colorama` library. Install it separately with `pip install colorama`
  if you want colors.
- A small progress bar is shown when fetching sources even if URL testing is
  disabled so you can monitor overall progress.

### Telegram Bot Mode

Set `telegram_api_id`, `telegram_api_hash` and `telegram_bot_token` in
`config.yaml` to enable the bot interface. Only Telegram accounts listed in
`allowed_user_ids` may issue commands. Obtain your numeric ID by messaging
[@userinfobot](https://t.me/userinfobot) and copying the `id` field from its
reply.

Acquire the `telegram_api_id` and `telegram_api_hash` by signing in at
[my.telegram.org](https://my.telegram.org) and creating a new application.
Copy the displayed **App api_id** and **App api_hash** into the corresponding
fields.

Run the tool in bot mode using your configuration file:
```bash
massconfigmerger fetch --bot --config config.yaml
```

The tool must be running for the `/update` and `/status` commands to work.

### Docker Compose Automation

The included `docker-compose.yml` automates running the scripts. The `merger` service loops every `MERGE_INTERVAL` seconds (default `86400`). Enable the optional `aggregator` profile to fetch new links on a schedule. It runs `massconfigmerger full` every `AGGREGATE_INTERVAL` seconds (default `43200`). The `retester` profile repeatedly runs `massconfigmerger retest` in the same way.

Start all services with:
```bash
docker compose up -d
```

Add profiles as needed, for example:
```bash
docker compose --profile aggregator --profile retester up -d
```

Key environment variables used by the compose file:
- `MERGE_INTERVAL` â€“ seconds between each run of `massconfigmerger merge` (default `86400`)
- `AGGREGATE_INTERVAL` â€“ seconds between `massconfigmerger full` runs when the `aggregator` profile is enabled (default `43200`)

### Optional Extras

The project defines a couple of [extras](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-extras) for optional features:

- `dev` â€“ installs the testing tools and linters needed for development (`pytest`, `mypy`, `flake8`, etc.).
- `web` â€“ installs the minimal Flask-based web interface. No FastAPI dependency is required.

Install them with `pip install -e .[dev]` or `pip install -e .[web]` as needed.

### Flask Web Interface

Mass Config Merger ships with a lightweight Flask server that exposes simple
endpoints to drive the aggregation and merging steps from a web browser or other
HTTP client.

Install the `web` extras from PyPI:
```bash
pip install massconfigmerger[web]
```

You can also install from a local checkout with `pip install -e .[web]`.

Run the server with:
```bash
python -m massconfigmerger.web
```

Navigate to `http://localhost:5000/aggregate` to collect new configurations,
`/merge` to merge the latest results and `/report` to view the last report. See
[docs/web-interface.md](docs/web-interface.md) for details on these routes.

### Proxy Configuration

If your network requires using an HTTP or SOCKS proxy, you can provide the
settings in two ways:

1. **Environment variables** â€“ export `HTTP_PROXY` or `SOCKS_PROXY` before
   running the scripts:
   ```bash
   export HTTP_PROXY=http://127.0.0.1:8080
   # or
   export SOCKS_PROXY=socks5://127.0.0.1:1080
   ```

2. **Configuration file** â€“ copy `config.yaml.example` to `config.yaml` and fill
   in the placeholder `HTTP_PROXY:` or `SOCKS_PROXY:` lines. These options work
   the same as the environment variables and are useful when running behind a
   firewall.

## Advanced Features

### Sorting by Reliability

Use `massconfigmerger merge --sort-by reliability` to rank servers by past success rates recorded in
`proxy_history.json`. The file location is set by the `history_file` option in
`config.yaml`.

### Regex Filtering

Use `--include-pattern` to keep only configs that match a regular expression.
Combine it with `--exclude-pattern` to fine tune which servers remain. These
flags work with both `fetch` and `merge` commands.

### GitHub Gist Upload

Use `--upload-gist` with either `fetch` or `merge` to automatically
upload the generated files to a private GitHub Gist. Provide a token with the
`gist` scope via the `github_token` setting in `config.yaml` or the
`GITHUB_TOKEN` environment variable. After uploading, the raw URLs are saved in
`output/upload_links.txt` for quick reference.

### Huge Source List

The `sources.txt` file collects links from hundreds of projects across GitHub
and Telegram.

### Handling Failing Sources

Each time a URL in `sources.txt` cannot be fetched, its failure count is stored
in `sources.failures.json`. When a source reaches the threshold number
of consecutive failures (3 by default) it is removed from `sources.txt` and
recorded in `sources_disabled.txt`. Advanced users can change the limit with
`--failure-threshold` or disable pruning entirely with `--no-prune`.

## FAQ

### Why does the script take so long?
The merger checks hundreds of servers. Reduce the number of sources or use a smaller `--concurrent-limit`. Skipping tests with `--no-url-test` on the `merge` command can also speed up runs. If connections often fail, increase the `--connect-timeout` value.

### There is no output directory
Ensure you ran the script in this repository and watch for errors. Results are saved in the `output/` folder or the location given by `--output-dir`.

### Telegram authentication errors
Verify your `telegram_api_id`, `telegram_api_hash` and bot token. Incorrect credentials or using a restricted account will prevent the aggregator from accessing Telegram. See [Telegram Bot Mode](#telegram-bot-mode) for enabling access with `allowed_user_ids`.

### GeoIP lookup errors
Install the `geoip2` package and download the free GeoLite2 database from MaxMind. Pass `--geoip-db /path/to/GeoLite2-Country.mmdb` to enable country filtering.

## Testing

Run the tests with `pytest`.

> **Important**: install the development extras **before** running the tests or
> `pytest` will fail with missing plugins. Use either
> of the following commands to make sure all dependencies are available:

```bash
pip install -e .[dev]
# or
pip install -r requirements-dev.txt
```

Then execute:
```bash
python -m pytest
```

## Changelog & Contributing

See [CHANGELOG.md](CHANGELOG.md) for a summary of new features and updates.
If you encounter problems or have improvements, please open an issue or submit a pull request on [GitHub](https://github.com/AmirrezaFarnamTaheri/MassConfigMerger).
For detailed contribution guidelines see [CONTRIBUTING.md](CONTRIBUTING.md).
Install the development tools with:
```bash
pip install -e .[dev]
pre-commit install
```

## Releasing a new version

1. Update the `version` field in `pyproject.toml`.
2. Add a corresponding entry at the top of `CHANGELOG.md` describing the update.
3. Commit your changes and create a git tag that matches the version:
```bash
git commit -am "Release vX.Y.Z"
git tag -a vX.Y.Z -m "vX.Y.Z"
git push && git push --tags
```

Pushing the tag triggers the `release` workflow which runs the tests, builds the
package, uploads it to PyPI using the `PYPI_API_TOKEN` secret and publishes a
GitHub release containing the generated files.
